const express = require("express");
const router = express.Router();
var theme = require("../models/theme");
var sujet = require("../models/sujet");
var ligne_theme = require("../models/ligne_theme");
var budjet = require("../models/budjet");
var ligne_budjet = require("../models/ligne_budjet");
const auth = require("../middlewares/passport");
var configuration = require("../config");
var Sequelize = require("sequelize");
const forecast = require("../models/forecast");
const user_sujet = require("../models/user_sujet");
const User = require("../models/user");
const sequelize = new Sequelize(
  configuration.connection.base,
  configuration.connection.root,
  configuration.connection.password,
  {
    host: configuration.connection.host,
    port: configuration.connection.port,
    dialect: "mysql",
    pool: {
      max: 5,
      min: 0,
      acquire: 30000,
      idle: 10000,
    },
    operatorsAliases: false,
  }
);

router.post("/saveTheme", (req, res) => {
  var annee = req.body.annee;
  var titre = req.body.titre;
  var num = req.body.num;
  var users = req.body.users;
  theme
    .create({
      annee: annee,
      titre: titre,
    })
    .then((e) => {
      var array = [];
      num.forEach(async (element) => {
        array.push(element.label);
      });
      var id_users = [];
      users.forEach(async (element) => {
        id_users.push(element.value);
      });
      ligne_budjet.findAll({include:[{model:sujet,as:'sujets', where: { num: array }},{model:budjet,as:'budjets', where: { annee: annee},include:[{model:user_sujet,as:'user_sujets', where: { id_user:id_users,annee: annee},include:['users']}]}],group:['id_sujet','id_budjet'] }).then((val) => {
        arrayInsert = [];
        var idS = [];
        val.forEach((insert) => {
          idS.push(insert.dataValues.id);
          arrayInsert.push({
            id_sujet: insert.dataValues.sujets.id,
            id_user: insert.dataValues.budjets.user_sujets.id_user,
            id_theme: e.id,
          });
        });
        ligne_budjet
          .sum("ligne_budjets.total", {
            where: { id_sujet: idS},
            include:[{model:budjet,as:'budjets', where: { annee: annee }}]
          })
          .then((val) => {
            theme
              .update(
                {
                  total: val,
                },
                { where: { id: e.id } }
              )
              .then((r2) => {
                ligne_theme.bulkCreate(arrayInsert).then(() => {
                  return res.status(200).send(true);
                });
              });
          });
      });
    })
    .catch((error) => {
      return res.status(403).send(false);
    });
});
router.post("/getThemeBudget", auth, async (req, res) => {
  var annee = req.body.annee;
  ligne_theme
    .findAll({
      group: ["id_theme"],
      attributes: [
        [sequelize.fn("GROUP_CONCAT", sequelize.col("id_sujet")), "sujets"],
      ],
      include: {
        model: theme,
        where: { annee: annee },
        as: "themes",
      },
      order: [["id_theme", "desc"]],
    })
    .then(function (r) {
      return res.status(200).send(r);
    });
});
router.post("/getDetailTheme", auth, async (req, res) => {
  var annee = req.body.annee;
  var id = req.body.id;
  ligne_theme
    .findOne({
      group: ["id_theme"],
      attributes: [
        [sequelize.fn("GROUP_CONCAT", sequelize.col("id_sujet")), "sujets"],
        [sequelize.fn("GROUP_CONCAT", sequelize.col("id_user")), "allusers"],

      ],
      include:[ {
        model: theme,
        where: { annee: annee, id: id },
        as: "themes"
      },'users'],

      order: [["id_theme", "desc"]],
    })
    .then(function (r) {
      var array = r.dataValues.sujets.split(",");
      var allusers = r.dataValues.allusers.split(",");
      ligne_budjet
        .findAll({
          where: { id_sujet: array },
          include: [
            {
              model: sujet,
              as: "sujets",
            },
            {
              model: budjet,
              as: "budjets",
              where: { annee: annee },
              include:[{
                model: user_sujet,
                as: "user_sujets",
                where:{id_user:allusers},
                include:['users']
              }]
            },
            "arborecences",
          ],
        })
        .then((val) => {
          var obj = new Object();
          val.forEach((e) => {
            if (!obj[e.dataValues.sujets.num]) {
              obj[e.dataValues.sujets.num] = [];
              obj[e.dataValues.sujets.num].push(e.dataValues);
            } else {
              obj[e.dataValues.sujets.num].push(e.dataValues);
            }
          });
          return res
            .status(200)
            .send({ detail: obj, titre: r.dataValues.themes.titre });
        });
    });
});
router.post("/exportExcel", auth, async (req, res) => {
  var annee = req.body.annee;
  var id = req.body.id;
  var where = { annee: annee };
  var allSujet = await ligne_theme.findOne({
    group: ["id_theme"],
    attributes: [
      [sequelize.fn("GROUP_CONCAT", sequelize.col("id_sujet")), "sujets"],
    ],
    include: {
      model: theme,
      where: { id: id },
      as: "themes",
    },
  });
  var id_sujet = allSujet.dataValues.sujets.split(",");
  var findLigne = await ligne_budjet.findAll({
    where: { id_sujet: id_sujet },
    include: [
      {
        model: budjet,
        as: "budjets",
        where: where,
      },
      "sujets",
      "arborecences",
    ],
  });
  var obj = new Object();
  findLigne.forEach((e) => {
    if (!obj[e.dataValues.sujets.num]) {
      obj[e.dataValues.sujets.num] = [];
    }
    obj[e.dataValues.sujets.num].push({
      sujet: e.dataValues.sujets.num + " : " + e.dataValues.sujets.sujet,
      arborecence:
        e.dataValues.arborecences.num +
        " : " +
        e.dataValues.arborecences.description,
      titre: allSujet.dataValues.themes.titre,
      Janvier: e.dataValues.jan,
      Fevrier: e.dataValues.feb,
      Mars: e.dataValues.mars,
      Q1: e.dataValues.q1,
      Avril: e.dataValues.apr,
      Mai: e.dataValues.mai,
      Juin: e.dataValues.juin,
      Q2: e.dataValues.q2,
      Juillet: e.dataValues.july,
      Aout: e.dataValues.aug,
      Septembre: e.dataValues.sep,
      Q3: e.dataValues.q3,
      Octobre: e.dataValues.oct,
      Novembre: e.dataValues.nov,
      Decembre: e.dataValues.dec,
      Q4: e.dataValues.q4,
      Total: e.dataValues.total,
    });
  });
  return res.status(200).json(obj);
});
/* deleteThemee */
router.delete("/deleteTheme/:id", auth, (req, res) => {
  var id = req.params.id;
  theme.findOne({ where: { id: id } }).then(function (r1) {
    if (!r1) {
      return res.status(403).send(false);
    } else {
      ligne_theme
        .destroy({ where: { id_theme: id } })
        .then((r2) => {
          forecast
          .destroy({ where: { id_theme: id } })
          .then((r2) => {
          theme.destroy({ where: { id: id } });
          return res.status(200).send(true);
        })  })
        .catch((error) => {
          return res.status(403).send(false);
        });
    }
  });
});
router.get("/visualisation/:annee", auth, async (req, res) => {
  var annee = req.params.annee;
  var ligne = await ligne_theme.findAll({
    group: ["id_theme"],
    include: [
      {
        model: theme,
        where: { annee: annee },
        as: "themes",
      },
    ],
    order: [[theme, "ordre", "asc"]],
  });
  var array = [];
  for (const key in ligne) {
    const e = ligne[key];
    var forecasts = await forecast.findOne({
      where: { id_theme: e.id_theme },
    });
    var valForecasts = 0;
    var valActual = 0;
    if (forecasts != null) {
      valForecasts = forecasts.forecast;
      valActual = forecasts.actual;
    }
    array.push({
      id: e.dataValues.id,
      actual: valActual,
      forecast: valForecasts,
      id_theme: e.dataValues.themes.id,
      annee: e.dataValues.themes.annee,
      titre: e.dataValues.themes.titre,
      total: e.dataValues.themes.total,
      ordre: e.dataValues.themes.ordre,
    });
  }
  return res.status(200).send(array);
});
router.put("/changeOrdre/:id/:ordre", auth, (req, res) => {
  var id = req.params.id;
  var ordre = req.params.ordre;
  theme.findOne({ where: { id: id } }).then(function (u) {
    if (!u) {
      return res.status(403).send(false);
    } else {
      theme
        .update(
          {
            ordre: ordre,
          },
          { where: { id: id } }
        )
        .then((r2) => {
          return res.status(200).send(true);
        })
        .catch((error) => {
          return res.status(403).send(false);
        });
    }
  });
});

router.get("/getLigneTheme/:id/:annee", auth, async (req, res) => {
  var id = req.params.id;
  var annee = req.params.annee;
  var findLigne = await ligne_theme.findAll({
    where: { id_theme: id },
    include: ["themes", "sujets"],
  });
  var arraySujet = [];
  var arrayTheme = [];
  findLigne.forEach((val, key) => {
    var idSujet = val.dataValues.sujets.id;
    var titre = val.dataValues.sujets.num + " " + val.dataValues.sujets.sujet;
    arraySujet[key] = idSujet;
    arrayTheme[key] = {
      id: idSujet,
      titre: titre,
      total: 0,
    };
  });
  var ligneBudg = await ligne_budjet.findAll({
    attributes: [[sequelize.fn("sum", sequelize.col("total")), "mnt"]],
    where: { id_sujet: arraySujet },
    group: ["id_sujet"],
  });
  for (const key in ligneBudg) {
    const element = ligneBudg[key];
    arrayTheme[key].total = element.dataValues.mnt;
  }
  return res.status(200).send(arrayTheme);
});
router.post("/getDetailThemeVis", auth, async (req, res) => {
  var annee = req.body.annee;
  var id = req.body.id;
  ligne_budjet
    .findAll({
      where: { id_sujet: id },
      include: [
        {
          model: sujet,
          as: "sujets",
        },
        {
          model: budjet,
          as: "budjets",
          where: { annee: annee },
          include:{
            model:user_sujet,
            as:"user_sujets",
            include:{
              model:User,
              as:"users",
            }
          }
        },
        "arborecences",
      ],
    })
    .then((val) => {
      var obj = new Object();
      val.forEach((e) => {
        if (!obj[e.dataValues.sujets.num]) {
          obj[e.dataValues.sujets.num] = [];
          obj[e.dataValues.sujets.num].push(e.dataValues);
        } else {
          obj[e.dataValues.sujets.num].push(e.dataValues);
        }
      });
      return res
        .status(200)
        .send({ detail: obj });
    });
  /* ligne_theme
    .findOne({
      group: ["id_theme"],
      attributes: [
        [sequelize.fn("GROUP_CONCAT", sequelize.col("id_sujet")), "sujets"],
      ],
      include: {
        model: theme,
        where: { annee: annee, id: id },
        as: "themes",
      },
      order: [["id_theme", "desc"]],
    })
    .then(function (r) {
      var array = r.dataValues.sujets.split(",");
      ligne_budjet
        .findAll({
          where: { id_sujet: array },
          include: [
            {
              model: sujet,
              as: "sujets",
            },
            {
              model: budjet,
              as: "budjets",
              where: { annee: annee },
            },
            "arborecences",
          ],
        })
        .then((val) => {
          var obj = new Object();
          val.forEach((e) => {
            if (!obj[e.dataValues.sujets.num]) {
              obj[e.dataValues.sujets.num] = [];
              obj[e.dataValues.sujets.num].push(e.dataValues);
            } else {
              obj[e.dataValues.sujets.num].push(e.dataValues);
            }
          });
          return res
            .status(200)
            .send({ detail: obj, titre: r.dataValues.themes.titre });
        });
    }); */
});

module.exports = router;
